convert futures and waiting to std::latch and std::atomic_bool
make sure textures are loaded only once
json recipe reading should use name for output slot, not index
recipes should be mirrorable
when turning shadows off in the sky, sky rendering suddenly is way faster

mouse input glitchy
add trampling crops
you pick a double stack, even when clicking once with right mouse button
make textures load only when used

prio:
right mouse button takes whole stack


add respawn screen with spectator mode after death
xp orbs get influenced by wind too much
rename mob::serializeValue to serialize
add wind sound back
add treshold when (wind) force exceeds pushing limit
block updates not working properly with leaves
giant mushrooms don't drop items
fences don't burn as fuel
improve baby mob spawning by using fitexpandinghitbox
make top part of door transparent for light, bottom part not
settings screen at start menu
placing bed still breaks block. luckily, chests drop their loot.
a zombie spawned a few blocks next to a torch in a cave.
stack grabbing outside of creative mode
back to title screen -> no music
charachter not rendered in inventory
do flowers spread pollen?
do mobs get in boats when touching one?
lag
shift click -> craft
movement is weird on stairs, and when leaving them you get launched off
sheep and cows should be able to eat grass
composter not usable
items seem to remain in inventory crafting grid sometimes
crops should need water
copper (smaller amounts)
explosion knockback?
hoeing a block works from below too
digging blocks below you when sneaking can make you float
when placing blocks, the whole block get checked for collision, not the hitbox of the block to place
luring mobs with food
nights seem to be very long when sleeping
you can fly out of your bed when the wind blows upward fast enough
rails are invisible
chest are rare in mineshafts
spawners spawn without chests in mineshafts

done:
furnace doesn't render burning process
rename tooldrop to tooldropcondition
mobs should stay at one spot for longer
change particle size based on type
why does every entity constructor have to take dimension and position arguments?
when we don't take dimension and position, we can add a particle argument without much cost.

optimization ideas for shadow brush:
- calculate weight difference per step somehow
- convert to matrix (position -> color)
interpolators -> one array
maybe byte manipulation? for bilinear interpolation
or colorf
we don't store references to positions for now, because the type of input might change
